<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LyricsGeneratorApp</name>
    </assembly>
    <members>
        <member name="T:LyricsGeneratorApp.Controllers.GeneratorController">
            <summary>
            Controller for the lyrics generator.
            </summary>
        </member>
        <member name="M:LyricsGeneratorApp.Controllers.GeneratorController.#ctor">
            <summary>
            Create new GeneratorController
            </summary>
        </member>
        <member name="M:LyricsGeneratorApp.Controllers.GeneratorController.Index">
            <summary>
            Shows index.
            </summary>
            <returns>ViewResult.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.Controllers.GeneratorController.CustomLyrics(System.String[],System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Supplies generated lyrics with a custom structure. 
            </summary>
            <param name="DynamicTextBox">Contains info about the structure.</param>
            <param name="prompt">Prompt to continue with.</param>
            <param name="regenerateLyrics">Verse to regenerate.</param>
            <param name="lyrics">The whole lyrics from which the verse is being regenerated.</param>
            <param name="syllables">Number of syllables on the line of the regenerated verse.</param>
            <param name="rhyme">Rhyme that will rhyme with the regenerated line.</param>
            <returns>ViewResult containing LyricsResponse containing lyrics with custom structure.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.Controllers.GeneratorController.Sonet(System.String,System.String,System.String)">
            <summary>
            Supplies generated sonet.
            </summary>
            <param name="prompt">Prompt to continue with.</param>
            <param name="regenerateLyrics">Verse to regenerate.</param>
            <param name="lyrics">The whole lyrics from which the verse is being regenerated.</param>
            <returns>ViewResult containing LyricsResponse containing Sonet.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.Controllers.GeneratorController.ABABLyrics(System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Supplies generated lyrics with the ABAB rhyme scheme.
            </summary>
            <param name="prompt">Prompt to continue with.</param>
            <param name="lines">Number of lines of the lyrics.</param>
            <param name="syllables">Number of syllables on the line of the regenerated verse.</param>
            <param name="regenerateLyrics">Verse to regenerate.</param>
            <param name="lyrics">The whole lyrics from which the verse is being regenerated.</param>
            <param name="rhyme">Rhyme that will rhyme with the regenerated line.</param>
            <returns>ViewResult containing LyricsResponse containing lyrics with ABAB rhyme scheme.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.Controllers.GeneratorController.AABBLyrics(System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Supplies generated lyrics with the AABB rhyme scheme.
            </summary>
            <param name="prompt">Prompt to continue with.</param>
            <param name="lines">Number of lines of the lyrics.</param>
            <param name="syllables">Number of syllables on the line of the regenerated verse.</param>
            <param name="regenerateLyrics">Verse to regenerate.</param>
            <param name="lyrics">The whole lyrics from which the verse is being regenerated.</param>
            <param name="rhyme">Rhyme that will rhyme with the regenerated line.</param>
            <returns>ViewResult containing LyricsResponse containing lyrics with AABB rhyme scheme.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.Controllers.GeneratorController.RewriteLyrics(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Supplies new lyrics that should be song-compatible with the inputted original lyrics.
            </summary>
            <param name="originalLyrics">The original lyrics of which we take the structure.</param>
            <param name="regenerateLyrics">Verse to regenerate.</param>
            <param name="lyrics">The whole lyrics from which the verse is being regenerated.</param>
            <param name="syllables">Number of syllables on the line of the regenerated verse.</param>
            <param name="rhyme">Rhyme that will rhyme with the regenerated line.</param>
            <returns>ViewResult containing LyricsResponse containing rewritten lyrics.</returns>
        </member>
        <member name="T:LyricsGeneratorApp.LyricsGenerator.Constants">
            <summary>
            Class containing constants.
            </summary>
        </member>
        <member name="F:LyricsGeneratorApp.LyricsGenerator.Constants.PathToTexts">
            <summary>
            Relative pat from the LyricsGeneratorApp folder.
            </summary>
        </member>
        <member name="F:LyricsGeneratorApp.LyricsGenerator.Constants.Stopwords">
            <summary>
            Czech language stopwords.
            </summary>
        </member>
        <member name="T:LyricsGeneratorApp.LyricsGenerator.NGramModel">
            <summary>
            Class containing the ngram model and methods related
            </summary>
        </member>
        <member name="P:LyricsGeneratorApp.LyricsGenerator.NGramModel.N">
            <summary>
            The maximum n of the ngrams.
            </summary>
        </member>
        <member name="F:LyricsGeneratorApp.LyricsGenerator.NGramModel.model">
            <summary>
            Hash map of the model. <code> Key : Context</code><code> Value : Hash map of Possible continuations </code>
            </summary>
        </member>
        <member name="F:LyricsGeneratorApp.LyricsGenerator.NGramModel.contextQueue">
            <summary>
            Context queue. Memory of the model.
            </summary>
        </member>
        <member name="F:LyricsGeneratorApp.LyricsGenerator.NGramModel.rhymer">
            <summary>
            Rhymer implementing IRhymer interface.
            </summary>
        </member>
        <member name="F:LyricsGeneratorApp.LyricsGenerator.NGramModel.endSymbol">
            <summary>
            Static symbol to signal natural pause in text.
            </summary>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.NGramModel.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Class constructor. <br/>
            Creates an empty N-Gram model with given parameters. <br/>
            Needs to be filled with text before usage, e.g.by public method:
            <code>
            ExtendByText( ... path ...)
            </code>
            </summary>
            <param name="N">Max number of word grams taken into consideration when both building and using the model.</param>
            <param name="strictnessOfRhymes">On a scale of 0 to 5, how strict are the rhyming rules. 5 is almost an identity and 0 is really benevolent.</param>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.NGramModel.#ctor(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Class constructor.<br/> 
            Creates an N-Gram model with given parameters.<br/>
            Fills the model with text from all files that can be found in the "path" folder.
            </summary>
            <param name="N">Max number of word grams taken into consideration when both building and using the model.</param>
            <param name="strictnessOfRhymes">On a scale of 0 to 5, how strict are the rhyming rules. 5 is almost an identity and 0 is really benevolent.</param>
            <param name="path">The path to the folder of the text files to learn from.</param>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.NGramModel.GenerateLineWithLength(System.String,System.Int32,LyricsGeneratorApp.LyricsGenerator.PromptWork)">
            <summary>
            Generates a line with a given length in syllables. Clears the model history before generating, generates from the starting prompt given by the parameter context.
            </summary>
            <param name="context">Context from which the next line will be generated.</param>
            <param name="lineSyllables">Number of syllables on the line.</param>
            <param name="continueWithPrompt">Bool value if the prompt should be included in the final line.</param>
            <returns>The generated line as string.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.NGramModel.GenerateLineWithLengthAndRhyme(System.String,System.String,System.Int32,LyricsGeneratorApp.LyricsGenerator.PromptWork)">
            <summary>
            Generate a line with a given length in syllables, ending with a word with the same rhyming scheme as parameter rhyme. Clears the model history before generating, generates from the starting prompt given by the parameter context.
            </summary>
            <param name="context">Context from which the next line will be generated.</param>
            <param name="rhyme">A word that should rhyme with the final word on the line.</param>
            <param name="lineSyllables">Number of syllables on the line.</param>
            <param name="continueWithPrompt">Boolean value if the prompt should be included in the final line.</param>
            <returns>The generated line as string.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.NGramModel.ClearHistory">
            <summary>
            Clear the history of an N-Gram model.
            </summary>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.NGramModel.ExtendModelByFolderOfTexts(System.String)">
            <summary>
            Extends model by each text file in the given folder. The model learns all ngrams present in these texts. After going through all texts, the model recalculates probabilities of all words.
            </summary>
            <param name="path">Path to the folder.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Throws DirectoryNotFoundException if path does not exist.</exception>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.NGramModel.ExtendModelByText(System.String,System.Boolean)">
            <summary>
            Extends model by the text of a file. The model learns all ngrams present in the text.
            </summary>
            <param name="path">Path to the text.</param>
            <param name="recalculateProbabilities">Recalculate probabilities of all words after uploading text. Unless calculated elsewhere, recalculateProbabilities must be set to TRUE.</param>
            <exception cref="T:System.IO.FileNotFoundException">Throws FileNotFoundException if path does not exist.</exception>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.NGramModel.addNGrams(System.Collections.Generic.List{System.String})">
            <summary>
            Create all possible ngrams of the words ending with the last word. Add these ngrams to the model.
            </summary>
            <param name="words">N words to be added to the model as an ngram.</param>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.NGramModel.recalculateNGramProbabilities">
            <summary>
            Recalculates ngram probabilities of all words in the model.
            </summary>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.NGramModel.recalculateContinuationsProbabilities(System.Collections.Generic.List{LyricsGeneratorApp.LyricsGenerator.WordInfo})">
            <summary>
            Recalculates ngram probabilities of the given list of continuations.
            </summary>
            <param name="continuations">Continuations to recalculate the probabilities of.</param>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.NGramModel.prepareContext(System.String)">
            <summary>
            Prepare the model for generating by adding requested context to the context queue.
            </summary>
            <param name="context">Context to be added to the contextQueue</param>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.NGramModel.getSortedContinuationsBasedOnContextQueue">
            <summary>
            Finds the right context and gets the continuations of that context sorted by probability.
            </summary>
            <returns>Sorted continuations of the correct context.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.NGramModel.recursiveLineSearcher(System.Collections.Generic.List{System.String},System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Recursive function searching for a line satisfying the constraints.
            </summary>
            <param name="context">Context from which the next word will be generated.</param>
            <param name="rhyme">A word that should rhyme with the final word on the line or null. If null, rhyme at the end of the line is ignored, searching only for the correct length.</param>
            <param name="syllablesNeeded">Number of syllables left to find.</param>
            <param name="found">Bool value if a satisfactory solution was found.</param>
            <param name="levelOfRecursion">Level of recursion.</param>
            <returns>Bool value if a satisfactory solution was found.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.NGramModel.lineExtractor(System.Int32,System.Collections.Generic.List{System.String},System.Text.StringBuilder)">
            <summary>
            Extracts line from private context queue based on number of wanted syllables.
            </summary>
            <param name="syllablesNeeded">Number of syllables still needed to put on the line.</param>
            <param name="myContext">Context from which the line is extracted.</param>
            <param name="line">Stringbuilder, could contain context.</param>
            <returns>Line as string of words divided by a single space, ending with comma and linebreak.</returns>
        </member>
        <member name="T:LyricsGeneratorApp.LyricsGenerator.Rhymer">
            <summary>
            Class containing methods for identifiing rhymes
            </summary>
        </member>
        <member name="P:LyricsGeneratorApp.LyricsGenerator.Rhymer.Strictness">
            <summary>
            On a scale of 0 to 5, how strict are the rhyming rules.
            5 is almost identity and 0 is really benevolent.
            </summary>
        </member>
        <member name="F:LyricsGeneratorApp.LyricsGenerator.Rhymer.rhymeLength">
            <summary>
            Letters of word to consider while rhyming.
            </summary>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.Rhymer.#ctor(System.Int32)">
            <summary>
            Class constructor specifying the strictness of the rhymes.
            </summary>
            <param name="strictnessOfRhymes">On a scale of 0 to 5, how strict are the rhyming rules.
            5 is almost identity and 0 is really benevolent.</param>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.Rhymer.Rhymes(System.String,System.String)">
            <summary>
            Compares two words and returns TRUE if the words rhyme according to the Rhymer, and FALSE if they don't.
            </summary>
            <param name="word1">First word to compare.</param>
            <param name="word2">Second word to compare.</param>
            <returns></returns>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.Rhymer.GetRhymeKey(System.String)">
            <summary>
            Returns a key for RhymeKeeper.Rhymes hash map. <br/>
            The key returned depends on the strictness of the rhyme and length of the input word.
            </summary>
            <param name="word">The word to get the rhyme key of.</param>
            <returns>Rhyme Key of the input word.</returns>
        </member>
        <member name="T:LyricsGeneratorApp.LyricsGenerator.SongTypes">
            <summary>
            Contains static methods using ngram model to generate differently structured songs.
            </summary>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.SongTypes.RewriteLine(System.Int32,System.String,System.String)">
            <summary>
            Creates an ngram model and writes a line according to the parameters.
            </summary>
            <param name="length">The length of the line.</param>
            <param name="rhyme">The rhyme of the line.</param>
            <param name="prompt">Prompt that precedes the line.</param>
            <returns>A line satisfying the given constraints.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.SongTypes.WriteCustomLyrics(System.String[],System.String)">
            <summary>
            Writes lyrics with a custom structure.
            </summary>
            <param name="structure">Each item of the list represents one line. The required form is: "*int number of syllables* *string symbol to represent a rhyme*".</param>
            <param name="prompt">Prompt to bein with.</param>
            <returns>Custom lyrics in a list, each item represents one line.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.SongTypes.WriteABABLyrics(System.String,System.Int32,System.Int32)">
            <summary>
            Writes lyrics with an ABAB rhyme scheme.
            </summary>
            <param name="prompt">Prompt to bein with</param>
            <param name="syllablesOnLine">Number of syllables per each line.</param>
            <param name="lines">Number of lines in the lyrics.</param>
            <returns>Lyrics with an ABAB rhyme scheme in a list, each item represents one line.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.SongTypes.WriteAABBLyrics(System.String,System.Int32,System.Int32)">
            <summary>
            Writes lyrics with an AABB rhyme scheme.
            </summary>
            <param name="prompt">Prompt to bein with</param>
            <param name="syllablesOnLine">Number of syllables per each line.</param>
            <param name="lines">Number of lines in the lyrics.</param>
            <returns>Lyrics with an AABB rhyme scheme in a list, each item represents one line.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.SongTypes.WriteSonet(System.String)">
            <summary>
            Write a Sonet.
            </summary>
            <param name="prompt">Prompt to begin with.</param>
            <returns>Sonet as a list, each item represents one line.</returns>
        </member>
        <member name="T:LyricsGeneratorApp.LyricsGenerator.StructureExtractor">
            <summary>
            Class containing static methods for extracting the structure of lyrics.
            </summary>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.StructureExtractor.GetRhymeKeyOfLine(System.String)">
            <summary>
            Analyze the line and return rhyme key according to Rhymer, of the last word of the line.
            </summary>
            <param name="line">Find the rhyme key of this line.</param>
            <returns>Rhyme key of the last word of the line.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.StructureExtractor.Extract(System.String)">
            <summary>
            Extracts structure of the given lyrics according to the rules of Czech.
            </summary>
            <param name="lyrics">The lyrics which structure we want to extract.</param>
            <returns>Structure of the given lyrics.</returns>
        </member>
        <member name="T:LyricsGeneratorApp.LyricsGenerator.Syllabytor">
            <summary>
            Class containing static methods for Syllabifying Czech language.
            </summary>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.Syllabytor.Syllabify(System.String)">
            <summary>
            Returns syllabified text as ArrayList of Strings. <br/>
            Only works for Czech language, trying to parse other languages will lead to incorrect results.
            </summary>
            <param name="text">Text to be syllabified.</param>
            <returns>List of syllables of the text.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.Syllabytor.CountSyllables(System.String)">
            <summary>
            Returns number of syllables in the text. <br/>
            Only works for Czech language, trying to parse other languages will lead to incorrect results.
            </summary>
            <param name="text">Text to have syllables counted.</param>
            <returns>Number of syllables in text.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.Syllabytor.createWordMask(System.String)">
            <summary>
            Returns a mask of the given word. <br/>
            Mask: <br/>
            C stands for consonant, V stands for vocal, 0 stands for ignore and count as previous syllable. <br/>
            This function implements part of an algorithm from an article from Naše řeč <a href="article">http://nase-rec.ujc.cas.cz/archiv.php?art=5348</a>
            </summary>
            <param name="word">The word to create a mask of.</param>
            <returns>Mask of the word.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.Syllabytor.splitMask(System.String)">
            <summary>
            Splits the mask made of vocals and consonants corresponding to original word into syllables. <br/>
            Mask: <br/>
            C stands for consonant, V stands for vocal, 0 stands for ignore and count as previous syllable. <br/>
            This function implements part of an algorithm from an article from Naše řeč <a href="article">http://nase-rec.ujc.cas.cz/archiv.php?art=5348</a>
            </summary>
            <param name="mask">The mask of the original word, see func. createMask()</param>
            <returns>String array of masked syllables.</returns>
        </member>
        <member name="T:LyricsGeneratorApp.LyricsGenerator.WordInfo">
            <summary>
            Class containing information about a word in the Bayessian probability N-Gram model.
            </summary>
        </member>
        <member name="F:LyricsGeneratorApp.LyricsGenerator.WordInfo.Word">
            <summary>
            The word of focus.
            </summary>
        </member>
        <member name="F:LyricsGeneratorApp.LyricsGenerator.WordInfo.Count">
            <summary>
            Number of occurrences of the word in all the text read by the N-Gram model.
            </summary>
        </member>
        <member name="F:LyricsGeneratorApp.LyricsGenerator.WordInfo.Probability">
            <summary>
            Probability of choosing this word given this context. Computed as <code>(Sum of all possible continuations) / count</code>
            </summary>
        </member>
        <member name="F:LyricsGeneratorApp.LyricsGenerator.WordInfo.Context">
            <summary>
            Context of the word, last N words concatenated to a string with space as a delimiter.
            Context can be shorter than N, so the model doesn't get lost when dealing with rare words.
            </summary>
        </member>
        <member name="M:LyricsGeneratorApp.LyricsGenerator.WordInfo.#ctor(System.String,System.Int32,System.Double,System.String)">
            <summary>
            Class constructor specifying word, count, probability and context.
            </summary>
            <param name="word">The word of focus.</param>
            <param name="count">Number of occurrences of the word in all the text read by the N-Gram model.</param>
            <param name="probability">Probability of choosing this word given this context. Computed as <code>(Sum of all possible continuations) / count</code></param>
            <param name="context">Context of the word, last N words concatenated to a string with space as a delimiter.
                                  Context can be shorter than N, so the model doesn't get lost when dealing with rare words.</param>
        </member>
        <member name="T:LyricsGeneratorApp.Models.LyricsResponse">
            <summary>
            Model
            </summary>
        </member>
        <member name="F:LyricsGeneratorApp.Models.LyricsResponse.Lyrics">
            <summary>
            Lyrics, each item of the list is one line.
            </summary>
        </member>
        <member name="F:LyricsGeneratorApp.Models.LyricsResponse.LyricsAsString">
            <summary>
            Lyrics, joined into one string, separated by commas.
            </summary>
        </member>
        <member name="T:LyricsGeneratorApp.Service.LyricsGeneratorService">
            <summary>
            Service containing functions to supply final lyrics to the Controller.
            </summary>
        </member>
        <member name="M:LyricsGeneratorApp.Service.LyricsGeneratorService.GetCustomLyrics(System.String[],System.String)">
            <summary>
            Supplies lyrics with a custom structure.
            </summary>
            <param name="structure">Structure of the lyrics.</param>
            <param name="prompt">Prompt to continue with</param>
            <returns>LyricsResponse containing custom lyrics.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.Service.LyricsGeneratorService.GetSonet(System.String)">
            <summary>
            Supplies a Sonet.
            </summary>
            <param name="prompt">Prompt to continue with</param>
            <returns>LyricsResponse containing a sonet.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.Service.LyricsGeneratorService.GetABABLyrics(System.String,System.Int32,System.Int32)">
            <summary>
            Supplies lyrics with ABAB rhyme sheme.
            </summary>
            <param name="prompt">Prompt to continue with</param>
            <param name="syllablesOnLine">Number of syllables on each line.</param>
            <param name="lines">NUmber of lines.</param>
            <returns>LyricsResponse containing lyrics with ABAB rhyme sheme.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.Service.LyricsGeneratorService.GetAABBLyrics(System.String,System.Int32,System.Int32)">
            <summary>
            Supplies lyrics with AABB rhyme sheme.
            </summary>
            <param name="prompt">Prompt to continue with</param>
            <param name="syllablesOnLine">Number of syllables on each line.</param>
            <param name="lines">NUmber of lines.</param>
            <returns>LyricsResponse containing lyrics with AABB rhyme sheme.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.Service.LyricsGeneratorService.GetLyricsFix(System.String,System.String,System.Int32,System.String)">
            <summary>
            Changes one line of the supplied lyrics.
            </summary>
            <param name="regenerateLyrics">Verse to regenerate.</param>
            <param name="allLyrics">The whole lyrics from which the verse is being regenerated.</param>
            <param name="syllables">Number of syllables on the line.</param>
            <param name="rhyme">Rhyme for the line.</param>
            <returns>LyricsResponse containing  the supplied lyrics with changed line.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.Service.LyricsGeneratorService.GetRewrittenLyrics(System.String)">
            <summary>
            Calls the extractor and custom lyrics generator on the extracted structure.
            </summary>
            <param name="originalLyrics">Lyrics which structure we want to replicate.</param>
            <returns>LyricsResponse containing  the supplied lyrics.</returns>
        </member>
        <member name="M:LyricsGeneratorApp.Service.LyricsGeneratorService.formatLyricsResponse(System.Collections.Generic.List{System.String})">
            <summary>
            Formats the lyrics into the LyricsResponse.
            </summary>
            <param name="finalLyrics">Lyrics to be formatted.</param>
            <returns>LyricsResponse.</returns>
        </member>
    </members>
</doc>
